<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/uploadfile/**" location="/uploadfile/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
		<!-- 파일업로드 처리를 위한 multipartResolver bean 등록 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding">
			<beans:value>utf-8</beans:value>
		</beans:property>
	</beans:bean>
	
	<context:component-scan base-package="com.bitcamp.open" />
	
	<!-- 데이터베이스 연결을 위한 dataSource 설정 -->
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="com.mysql.jdbc.Driver" />
		<beans:property name="jdbcUrl"
			value="jdbc:mysql://localhost/openproject?characterEncoding=utf8" />
		<beans:property name="user" value="bit" />
		<beans:property name="password" value="bit" />
	</beans:bean>
	
		<!-- memberDao 빈 등록 -->
	<beans:bean id="memberDao" class="com.bitcamp.open.member.dao.MemberDao">
		<beans:constructor-arg ref="dataSource" />
	</beans:bean>
	
	<!-- MemberRegService 빈 등록 -->
	<beans:bean id="memberRegService"
		class="com.bitcamp.open.member.service.MemberRegService">
		<!-- <beans:property name="dao" ref="memberDao" /> -->
		<!-- <beans:property name="dao" ref="myBatisDao"/> -->
	</beans:bean>
	
	<!-- MemberLoginService 빈 등록 -->
	<beans:bean id="memberLoginService"
		class="com.bitcamp.open.member.service.MemberLoginService">
	</beans:bean>
	
	<!-- memberListService 빈 등록 -->
		<beans:bean id="memberListService"
		class="com.bitcamp.open.member.service.MemberListService" >
		</beans:bean>
	
	<!-- MyBatis & Spring 연동 -->
	<beans:bean id="sqlSessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations"
			value="classpath:com/bitcamp/open/mybatis/mapper/*.xml" />
	</beans:bean>
	
	
	
	<!-- SqlSessionTemplate 생성하는 빈 : Mybatis로 Dao 클래스를 구성할 때 사용 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory" />
	</beans:bean>
	

	
</beans:beans>
